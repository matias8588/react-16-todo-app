{"version":3,"sources":["Components/TaskBannerComponent.tsx","Components/TaskCreatorComponent.tsx","Components/VisibilityControlComponent.tsx","Components/TaskRowComponent.tsx","ui/theme/index.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","paddingBottom","menuButton","marginRight","spacing","title","TaskBannerComponent","props","classes","className","AppBar","position","color","Toolbar","Typography","variant","taskItems","filter","t","done","length","paddingTop","display","button","marginLeft","TaskCreatorComponent","useState","newTaskName","setNewTaskName","TextField","id","label","type","value","onChange","e","target","Button","onClick","callback","startIcon","VisibilityControlComponent","Checkbox","checked","isChecked","htmlFor","description","modal","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","TaskRowComponent","open","setOpen","updateTaskName","setUpdateTaskName","handleClose","TableRow","key","task","name","TableCell","component","scope","align","defaultChecked","inputProps","toggleTask","IconButton","aria-label","deleteTask","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","updateCallback","createMuiTheme","primary","main","secondary","boldText","fontWeight","App","edit","setTaskItems","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","updateTask","taskName","actualTask","map","removeIndex","indexOf","filteredItems","slice","concat","taskTableRows","doneValue","ThemeProvider","Container","find","TableContainer","Table","TableHead","TableBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c39937d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      paddingBottom: 80,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport const TaskBannerComponent = (props: any) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\" color=\"primary\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\">\r\n            Tasks App ({props.taskItems.filter((t: any) => !t.done).length}{\" \"}\r\n            tasks to do)\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n} from \"@material-ui/core\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      paddingTop: 20,\r\n      paddingBottom: 40,\r\n      display: \"flex\",\r\n    },\r\n    button: { marginLeft: 50 },\r\n  }),\r\n);\r\n\r\nexport const TaskCreatorComponent = (props: any) => {\r\n  const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n  const updateNewTaskValue = (e: any) => setNewTaskName(e.target.value);\r\n\r\n  const createNewTask = () => {\r\n    props.callback(newTaskName);\r\n    setNewTaskName(\"\");\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"Add a task\"\r\n        type=\"text\"\r\n        value={newTaskName}\r\n        onChange={updateNewTaskValue}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={createNewTask}\r\n        className={classes.button}\r\n        color=\"default\"\r\n        startIcon={<CloudUploadIcon />}\r\n      >\r\n        Add\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Checkbox } from \"@material-ui/core\";\n\nexport const VisibilityControlComponent = (props: any) => {\n  return (\n    <div>\n      <Checkbox\n        color=\"primary\"\n        checked={props.isChecked}\n        onChange={e => props.callback(e.target.checked)}\n      />\n      <label htmlFor=\"form-check-label\">Show {props.description}</label>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\r\nimport {\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  IconButton,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    modal: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n    },\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"2px solid #000\",\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n    root: {\r\n      flexGrow: 1,\r\n      paddingTop: 20,\r\n      paddingBottom: 40,\r\n      display: \"flex\",\r\n    },\r\n    button: { marginLeft: 50 },\r\n  }),\r\n);\r\n\r\nexport const TaskRowComponent = (props: any) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [updateTaskName, setUpdateTaskName] = useState(\"\");\r\n\r\n  const updateTaskValue = (e: any) => setUpdateTaskName(e.target.value);\r\n\r\n  const updateTask = () => {\r\n    props.updateCallback(updateTaskName, props.task.name);\r\n    setUpdateTaskName(\"\");\r\n    handleClose();\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TableRow key={props.task.name}>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          {props.task.name}\r\n        </TableCell>\r\n        <TableCell align=\"right\">\r\n          <Checkbox\r\n            defaultChecked\r\n            color=\"primary\"\r\n            value=\"default\"\r\n            inputProps={{ \"aria-label\": \"checkbox with default color\" }}\r\n            checked={props.task.done}\r\n            onChange={() => props.toggleTask(props.task)}\r\n          />\r\n        </TableCell>\r\n        <TableCell align=\"right\">\r\n          <IconButton aria-label=\"edit\" color=\"secondary\" onClick={handleOpen}>\r\n            <EditIcon />\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell align=\"right\">\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            color=\"secondary\"\r\n            onClick={() => props.deleteTask(props.task)}\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </TableCell>\r\n      </TableRow>\r\n      {/* // TODO: Move to a component */}\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <div className={classes.paper}>\r\n            <div className={classes.root}>\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                label={\"Edit: \" + props.task.name}\r\n                type=\"text\"\r\n                value={updateTaskName}\r\n                onChange={updateTaskValue}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={updateTask}\r\n                className={classes.button}\r\n                color=\"default\"\r\n                startIcon={<EditIcon />}\r\n              >\r\n                Edit\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Fade>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: { main: \"#f44336\" },\r\n    secondary: { main: \"#607d8b\" }\r\n  }\r\n});\r\n\r\nexport default theme;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { TaskBannerComponent } from \"./Components/TaskBannerComponent\";\r\nimport { TaskCreatorComponent } from \"./Components/TaskCreatorComponent\";\r\nimport { VisibilityControlComponent } from \"./Components/VisibilityControlComponent\";\r\nimport { TaskRowComponent } from \"./Components/TaskRowComponent\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Container,\r\n  ThemeProvider,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n} from \"@material-ui/core\";\r\nimport theme from \"./ui/theme/index\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      paddingTop: 40,\r\n      paddingBottom: 40,\r\n    },\r\n    boldText: {\r\n      fontWeight: \"bolder\",\r\n    },\r\n  }),\r\n);\r\n\r\nfunction App() {\r\n  const [taskItems, setTaskItems] = useState([\r\n    {\r\n      name: \"Task one\",\r\n      edit: false,\r\n      done: false,\r\n    },\r\n    {\r\n      name: \"Task two\",\r\n      edit: false,\r\n      done: false,\r\n    },\r\n    {\r\n      name: \"Task three\",\r\n      edit: false,\r\n      done: true,\r\n    },\r\n    {\r\n      name: \"Task false\",\r\n      edit: false,\r\n      done: false,\r\n    },\r\n  ]);\r\n  const [showCompleted, setShowCompleted] = useState(true);\r\n\r\n  useEffect(() => {\r\n    let data = localStorage.getItem(\"tasks\");\r\n    if (data != null) {\r\n      setTaskItems(JSON.parse(data));\r\n    } else {\r\n      setTaskItems([\r\n        { name: \"Task One\", edit: false, done: false },\r\n        { name: \"Task Two\", edit: false, done: false },\r\n        { name: \"Task Three\", edit: false, done: true },\r\n        { name: \"Task Four\", edit: false, done: false },\r\n      ]);\r\n      setShowCompleted(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(taskItems));\r\n  }, [taskItems]);\r\n\r\n  const createNewTask = (taskName: any) => {\r\n    if (!taskItems.find(t => t.name === taskName)) {\r\n      setTaskItems([\r\n        ...taskItems,\r\n        { name: taskName, edit: false, done: false },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const updateTask = (taskName: any, actualTask: any) => {\r\n    setTaskItems(\r\n      taskItems.map(t =>\r\n        t.name === actualTask ? { ...t, name: taskName } : t,\r\n      ),\r\n    );\r\n  };\r\n\r\n  const toggleTask = (task: any) => {\r\n    setTaskItems(\r\n      taskItems.map(t => (t.name === task.name ? { ...t, done: !t.done } : t)),\r\n    );\r\n  };\r\n\r\n  const deleteTask = (task: any) => {\r\n    let removeIndex = taskItems\r\n      .map(function(task) {\r\n        return task.name;\r\n      })\r\n      .indexOf(task.name);\r\n\r\n    let filteredItems = taskItems\r\n      .slice(0, removeIndex)\r\n      .concat(taskItems.slice(removeIndex + 1, taskItems.length));\r\n\r\n    setTaskItems(filteredItems);\r\n  };\r\n\r\n  const taskTableRows = (doneValue: any) =>\r\n    taskItems\r\n      .filter(task => task.done === doneValue)\r\n      .map(task => (\r\n        <TaskRowComponent\r\n          key={task.name}\r\n          task={task}\r\n          toggleTask={toggleTask}\r\n          deleteTask={deleteTask}\r\n          updateCallback={updateTask}\r\n        />\r\n      ));\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <TaskBannerComponent taskItems={taskItems} />\r\n        <Container>\r\n          <TaskCreatorComponent callback={createNewTask} />\r\n          <TableContainer className={classes.root}>\r\n            <Table aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell className={classes.boldText}>\r\n                    Description\r\n                  </TableCell>\r\n                  <TableCell className={classes.boldText} align=\"right\">\r\n                    Done\r\n                  </TableCell>\r\n                  <TableCell className={classes.boldText} align=\"right\">\r\n                    Edit\r\n                  </TableCell>\r\n                  <TableCell className={classes.boldText} align=\"right\">\r\n                    Delete\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>{taskTableRows(false)}</TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Container>\r\n        <Container>\r\n          <div>\r\n            <VisibilityControlComponent\r\n              description=\"Completed Tasks\"\r\n              isChecked={showCompleted}\r\n              callback={(checked: any) => setShowCompleted(checked)}\r\n            />\r\n          </div>\r\n        </Container>\r\n        <Container>\r\n          {showCompleted && (\r\n            <TableContainer className={classes.root}>\r\n              <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell className={classes.boldText}>\r\n                      Description\r\n                    </TableCell>\r\n                    <TableCell className={classes.boldText} align=\"right\">\r\n                      Done\r\n                    </TableCell>\r\n                    <TableCell className={classes.boldText} align=\"right\">\r\n                      Edit\r\n                    </TableCell>\r\n                    <TableCell className={classes.boldText} align=\"right\">\r\n                      Delete\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>{taskTableRows(true)}</TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          )}\r\n        </Container>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}