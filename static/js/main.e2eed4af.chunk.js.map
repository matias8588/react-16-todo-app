{"version":3,"sources":["Components/TaskBannerComponent.tsx","Components/TaskCreatorComponent.tsx","Components/VisibilityControlComponent.tsx","Components/TaskRowComponent.tsx","ui/theme/index.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","paddingBottom","menuButton","marginRight","spacing","title","TaskBannerComponent","props","classes","className","AppBar","position","color","Toolbar","Typography","variant","userName","taskItems","filter","t","done","length","paddingTop","display","button","marginLeft","TaskCreatorComponent","useState","newTaskName","setNewTaskName","TextField","id","label","type","value","onChange","e","target","Button","onClick","callback","startIcon","VisibilityControlComponent","checked","isChecked","htmlFor","description","TaskRowComponent","TableRow","key","task","name","TableCell","component","scope","align","Checkbox","defaultChecked","inputProps","toggleTask","IconButton","aria-label","deleteTask","createMuiTheme","palette","primary","main","secondary","boldText","fontWeight","App","setUserName","setTaskItems","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","removeIndex","indexOf","filteredItems","slice","concat","taskTableRows","doneValue","ThemeProvider","Container","taskName","find","TableContainer","Table","TableHead","TableBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2eed4af.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  makeStyles,\n  Theme,\n  createStyles,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      paddingBottom: 40,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport const TaskBannerComponent = (props: any) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"primary\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            {props.userName}'s Tasks App (\n            {props.taskItems.filter((t: any) => !t.done).length} tasks to do)\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  TextField,\n  Button,\n  makeStyles,\n  Theme,\n  createStyles,\n} from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      paddingTop: 20,\n      paddingBottom: 40,\n      display: \"flex\",\n    },\n    button: { marginLeft: 50 },\n  }),\n);\n\nexport const TaskCreatorComponent = (props: any) => {\n  const [newTaskName, setNewTaskName] = useState(\"\");\n\n  const updateNewTaskValue = (e: any) => setNewTaskName(e.target.value);\n\n  const createNewTask = () => {\n    props.callback(newTaskName);\n    setNewTaskName(\"\");\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        id=\"standard-basic\"\n        label=\"Add a task\"\n        type=\"text\"\n        value={newTaskName}\n        onChange={updateNewTaskValue}\n      />\n      <Button\n        variant=\"contained\"\n        onClick={createNewTask}\n        className={classes.button}\n        color=\"default\"\n        startIcon={<CloudUploadIcon />}\n      >\n        Add\n      </Button>\n      {/* <button onClick={createNewTask}>Add</button> */}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const VisibilityControlComponent = (props: any) => {\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        checked={props.isChecked}\n        onChange={e => props.callback(e.target.checked)}\n      />\n      <label htmlFor=\"form-check-label\">Show {props.description}</label>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { TableRow, TableCell, Checkbox, IconButton } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nexport const TaskRowComponent = (props: any) => (\n  <>\n    <TableRow key={props.task.name}>\n      <TableCell component=\"th\" scope=\"row\">\n        {props.task.name}\n      </TableCell>\n      <TableCell align=\"right\">\n        <Checkbox\n          defaultChecked\n          color=\"primary\"\n          value=\"default\"\n          inputProps={{ \"aria-label\": \"checkbox with default color\" }}\n          checked={props.task.done}\n          onChange={() => props.toggleTask(props.task)}\n        />\n      </TableCell>\n      <TableCell align=\"right\">\n        <IconButton\n          aria-label=\"delete\"\n          color=\"secondary\"\n          onClick={() => props.deleteTask(props.task)}\n        >\n          <DeleteIcon />\n        </IconButton>\n      </TableCell>\n    </TableRow>\n  </>\n);\n","import { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#f44336\" },\n    secondary: { main: \"#607d8b\" }\n  }\n});\n\nexport default theme;\n","import React, { useState, useEffect } from \"react\";\nimport { TaskBannerComponent } from \"./Components/TaskBannerComponent\";\nimport { TaskCreatorComponent } from \"./Components/TaskCreatorComponent\";\nimport { VisibilityControlComponent } from \"./Components/VisibilityControlComponent\";\nimport { TaskRowComponent } from \"./Components/TaskRowComponent\";\nimport {\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Container,\n  ThemeProvider,\n  makeStyles,\n  Theme,\n  createStyles,\n} from \"@material-ui/core\";\nimport theme from \"./ui/theme/index\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: 40,\n      paddingBottom: 40,\n    },\n    boldText: {\n      fontWeight: \"bolder\",\n    },\n  }),\n);\n\nfunction App() {\n  const [userName, setUserName] = useState(\"Mati\");\n  const [taskItems, setTaskItems] = useState([\n    {\n      name: \"Task one\",\n      done: false,\n    },\n    {\n      name: \"Task two\",\n      done: false,\n    },\n    {\n      name: \"Task three\",\n      done: true,\n    },\n    {\n      name: \"Task false\",\n      done: false,\n    },\n  ]);\n  const [showCompleted, setShowCompleted] = useState(true);\n\n  useEffect(() => {\n    let data = localStorage.getItem(\"tasks\");\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setUserName(\"Mati\");\n      setTaskItems([\n        { name: \"Task One\", done: false },\n        { name: \"Task Two\", done: false },\n        { name: \"Task Three\", done: true },\n        { name: \"Task Four\", done: false },\n      ]);\n      setShowCompleted(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(taskItems));\n  }, [taskItems]);\n\n  const createNewTask = (taskName: any) => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, { name: taskName, done: false }]);\n    }\n  };\n\n  const toggleTask = (task: any) => {\n    setTaskItems(\n      taskItems.map(t => (t.name === task.name ? { ...t, done: !t.done } : t)),\n    );\n  };\n\n  const deleteTask = (task: any) => {\n    let removeIndex = taskItems\n      .map(function(task) {\n        return task.name;\n      })\n      .indexOf(task.name);\n\n    let filteredItems = taskItems\n      .slice(0, removeIndex)\n      .concat(taskItems.slice(removeIndex + 1, taskItems.length));\n\n    setTaskItems(filteredItems);\n  };\n\n  const taskTableRows = (doneValue: any) =>\n    taskItems\n      .filter(task => task.done === doneValue)\n      .map(task => (\n        <TaskRowComponent\n          key={task.name}\n          task={task}\n          toggleTask={toggleTask}\n          deleteTask={deleteTask}\n        />\n      ));\n\n  const classes = useStyles();\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <TaskBannerComponent userName={userName} taskItems={taskItems} />\n        <Container>\n          <TaskCreatorComponent callback={createNewTask} />\n          <TableContainer className={classes.root}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell className={classes.boldText}>\n                    Description\n                  </TableCell>\n                  <TableCell className={classes.boldText} align=\"right\">\n                    Done\n                  </TableCell>\n                  <TableCell className={classes.boldText} align=\"right\">\n                    Delete\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>{taskTableRows(false)}</TableBody>\n            </Table>\n          </TableContainer>\n        </Container>\n        <Container>\n          <div>\n            <VisibilityControlComponent\n              description=\"Completed Tasks\"\n              isChecked={showCompleted}\n              callback={(checked: any) => setShowCompleted(checked)}\n            />\n          </div>\n        </Container>\n        <Container>\n          {showCompleted && (\n            <TableContainer className={classes.root}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell className={classes.boldText}>\n                      Description\n                    </TableCell>\n                    <TableCell className={classes.boldText} align=\"right\">\n                      Done\n                    </TableCell>\n                    <TableCell className={classes.boldText} align=\"right\">\n                      Delete\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>{taskTableRows(true)}</TableBody>\n              </Table>\n            </TableContainer>\n          )}\n        </Container>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}